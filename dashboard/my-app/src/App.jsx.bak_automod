import { BrowserRouter, Routes, Route, NavLink, Navigate } from "react-router-dom";
import { useEffect, useState } from "react";
import LoginGear from "./LoginGear.jsx";
import AuthModal from "./AuthModal.jsx";
import EntriesModal from "./EntriesModal.jsx";
import "./App.css";

// Fallback-Poll-Intervall ("alle paar Sekunden")
const POLL_MS = 8000;


// === Neon SVG icon set (stroke-only, no circle) ===
const iconBase = {
  stroke: "currentColor",
  fill: "none",
  strokeWidth: 1.9,
  strokeLinecap: "round",
  strokeLinejoin: "round",
};

const IconUser = ({ size = 44, className = "" }) => (
  <svg width={size} height={size} viewBox="0 0 24 24" aria-hidden="true" className={className}>
    <circle {...iconBase} cx="12" cy="7" r="4" />
    <path {...iconBase} d="M5.5 20c1.8-3 5-4.5 6.5-4.5S15.7 17 18 20" />
  </svg>
);

const IconPlane = ({ size = 44, className = "" }) => (
  <svg width={size} height={size} viewBox="0 0 24 24" aria-hidden="true" className={className}>
    <path {...iconBase} d="M21 16L3 9l7-2 3-5 2 6 6 3-6 2-2 6z" />
  </svg>
);

const IconBan = ({ size = 44, className = "" }) => (
  <svg width={size} height={size} viewBox="0 0 24 24" aria-hidden="true" className={className}>
    <circle {...iconBase} cx="12" cy="12" r="9" />
    <path {...iconBase} d="M5.6 5.6l12.8 12.8" />
  </svg>
);

const IconClock = ({ size = 44, className = "" }) => (
  <svg width={size} height={size} viewBox="0 0 24 24" aria-hidden="true" className={className}>
    <circle {...iconBase} cx="12" cy="12" r="9" />
    <path {...iconBase} d="M12 7v6l4 2" />
  </svg>
);

const IconMedical = ({ size = 44, className = "" }) => (
  <svg width={size} height={size} viewBox="0 0 24 24" aria-hidden="true" className={className}>
    <path {...iconBase} d="M12 5v14M5 12h14" />
    <rect {...iconBase} x="3.5" y="3.5" width="17" height="17" rx="3" />
  </svg>
);

// === Neon palette ===
const NEON = {
  present: "#39FF14",   // Anwesend
  travel: "#00E5FF",    // Unterwegs
  absent: "#FF00FF",    // Abwesend
  late: "#FFD500",      // Verspätet
  sick: "#FF1744",      // Krank
};

// Helper: unified status icon renderer
const StatusIcon = ({ s, size = 44, className = "" }) => {
  if (s?.Icon) return <s.Icon size={size} className={className} />;
  if (typeof s?.icon === 'string') return <span className={className} aria-hidden="true" style={{ fontSize: size * 0.8 }}>{s.icon}</span>;
  if (typeof s?.emoji === 'string') return <span className={className} aria-hidden="true" style={{ fontSize: size * 0.8 }}>{s.emoji}</span>;
  return null;
};


/** Status-Definitionen: Key, Label, Kachel-Farbe, Icon */
const STATUSES = [
  { key: "present", label: "Anwesend", cls: "is-green", color: NEON.present, Icon: IconUser },
  { key: "travel",  label: "Unterwegs", cls: "is-cyan",  color: NEON.travel,  Icon: IconPlane },
  { key: "absent",  label: "Abwesend",  cls: "is-red",   color: NEON.absent,  Icon: IconBan },
  { key: "late",    label: "Verspätet", cls: "is-amber", color: NEON.late,    Icon: IconClock },
  { key: "sick",    label: "Krank",     cls: "is-purple",color: NEON.sick,    Icon: IconMedical },
];

function InfoBoard() {
  const [showAuth, setShowAuth] = useState(false);
  const [showEntries, setShowEntries] = useState(false);
  const [allEntries, setAllEntries] = useState([]);

  const [user, setUser] = useState(() => {
    try { return JSON.parse(localStorage.getItem("authUser") || "null"); } catch { return null; }
  });

  const API_BASE = "/api";

  const doLogout = () => {
    try { localStorage.removeItem('authUser'); } catch {}
    setUser(null);
    setShowEntries(false);
    window.dispatchEvent(new Event('auth:logout'));
  };

  // Statt Demo-Daten: leere Arrays
  const [teilnehmer, setTeilnehmer] = useState([]);
  const [azubis, setAzubis] = useState([]);
  const [fachbereichsleiter, setFachbereichsleiter] = useState([]);


  
    // Einträge laden (auch für SSE-Refresh verwendbar)
  async function refreshEntries() {
    try {
      const res = await fetch(`${API_BASE}/eintraege.php`, { headers: { Accept: 'application/json' } });
      const data = await res.json();
      setAllEntries(Array.isArray(data.items) ? data.items : []);
    } catch (e) {
      console.error('Einträge laden fehlgeschlagen:', e);
    }
  }

  // Alle Einträge laden und zyklisch aktualisieren (Fallback)
  useEffect(() => {
    refreshEntries();
    const t = setInterval(refreshEntries, POLL_MS);
    return () => clearInterval(t);
  }, []);

  // Live-Updates via Server-Sent Events (SSE)
  useEffect(() => {
    let es;
    try {
      es = new EventSource(`${API_BASE}/events.php`);
      const onEntriesChanged = () => { refreshEntries(); };
      es.addEventListener('entries-changed', onEntriesChanged);
      es.addEventListener('status-changed', (ev) => {
        try {
          const payload = ev.data ? JSON.parse(ev.data) : null;
          const id = payload?.id ?? payload?.teilnehmer_id;
          const status = payload?.status;
          if (!id || !status) return;
          const applyTo = (list, setter) => {
            if (!Array.isArray(list) || list.length === 0) return;
            const next = list.map(p => p.id === id ? { ...p, status } : p);
            setter(next);
          };
          applyTo(teilnehmer, setTeilnehmer);
          applyTo(azubis, setAzubis);
          applyTo(fachbereichsleiter, setFachbereichsleiter);
        } catch (e) {
          // ignore malformed payloads
        }
      });
      es.addEventListener('hello', () => {});
      es.onerror = (e) => { 
        /* silently fall back to polling */
      };
      return () => {
        try { es.removeEventListener('entries-changed', onEntriesChanged); } catch {}
        try { es.close(); } catch {}
      };
    } catch (e) {
      console.warn('SSE nicht verfügbar, nutze Polling:', e);
    }
  }, []);

  
  // Exakter Refresh genau zu Start/Ende von Terminen/Urlaub
  useEffect(() => {
    if (!allEntries || allEntries.length === 0) return;
    const now = Date.now();
    const nextTimes = [];
    for (const e of allEntries) {
      const s = new Date(e.start).getTime();
      const end = e.ende ? new Date(e.ende).getTime() : (s + 60*60*1000);
      if (s > now) nextTimes.push(s);
      if (end > now) nextTimes.push(end);
    }
    if (nextTimes.length === 0) return;
    nextTimes.sort((a,b) => a - b);
    const delay = Math.max(0, Math.min(nextTimes[0] - now, 24*60*60*1000)) + 250;
    const timer = setTimeout(() => { refreshEntries(); }, delay);
    return () => clearTimeout(timer);
  }, [JSON.stringify(allEntries)]);
// Status automatisch setzen: Termin → is-cyan, Urlaub → is-red
  useEffect(() => {
    const now = new Date();

    const byPerson = new Map();
    for (const e of allEntries) {
      const pid = e.teilnehmer_id;
      const start = new Date(e.start);
      const ende = e.ende ? new Date(e.ende) : null;
      const active = ende ? (now >= start && now <= ende) : (now >= start && now <= new Date(start.getTime() + 60*60*1000)); // 1h Fenster falls kein Ende
      if (!active) continue;

      let status = null;
      if (e.typ === 'termin') status = 'travel'; // blau/cyan
      else if (e.typ === 'urlaub') status = 'absent'; // rot

      if (status) {
        // Pro Person nur eine Priorität (Termin > Urlaub)
        const current = byPerson.get(pid);
        const pri = status === 'travel' ? 2 : 1;
        const curPri = current?.pri ?? 0;
        if (pri >= curPri) byPerson.set(pid, { status, pri });
      }
    }

    function apply(list, setter) {
      if (list.length === 0) return;
      const next = list.map(p => {
        const hit = byPerson.get(p.id);
        return hit ? { ...p, status: hit.status } : p;
        });
      setter(next);
    }

    apply(teilnehmer, setTeilnehmer);
    apply(azubis, setAzubis);
    apply(fachbereichsleiter, setFachbereichsleiter);
  }, [allEntries]);
// Beim Mount aus der API laden
  useEffect(() => {
    async function load() {
      try {
        const res = await fetch(`${API_BASE}/teilnehmer.php`, { headers: { Accept: "application/json" } });
        const ct = res.headers.get("content-type") || "";
        if (!ct.includes("application/json")) {
          const text = await res.text();
          throw new Error(`Unerwartete Antwort der Teilnehmer-API. Inhaltstyp: ${ct}. Auszug: ${text.slice(0, 160)}…`);
        }
        const data = await res.json();
        if (!res.ok || data?.ok === false) {
          throw new Error(data?.error || `HTTP ${res.status}`);
        }
        const items = Array.isArray(data.items) ? data.items : [];

        // Frontend-Status (Board-Farben) vorerst lokal: default "present"
        const withStatus = items.map(p => ({ ...p, status: "absent" }));

        setTeilnehmer(withStatus.filter(p => p.rolle === "Teilnehmer"));
        setAzubis(withStatus.filter(p => p.rolle === "Azubi"));
        setFachbereichsleiter(withStatus.filter(p => p.rolle === "Fachbereichsleiter"));

      } catch (err) {
        console.error("Teilnehmer laden fehlgeschlagen:", err);
      }
    }
    load();
    // Auch auf benutzerdefiniertes Refresh-Ereignis reagieren (z.B. nach Registrierung)
    const onRefresh = () => load();
    window.addEventListener('participants:refresh', onRefresh);
    return () => window.removeEventListener('participants:refresh', onRefresh);
  }, []);


  // Offenes Ring-Menü (welche Gruppe/Index + Center-Position am Screen)
  const [ring, setRing] = useState(null); // { group: 'teilnehmer'|'azubis', index: number, center:{x,y} }

  const getStatus = (key) => STATUSES.find(s => s.key === key) ?? STATUSES[0];

  const openRing = (group, index, ev) => {
    const r = ev.currentTarget.getBoundingClientRect();
    setRing({
      group,
      index,
      center: { x: r.left + r.width / 2, y: r.top + r.height / 2 }
    });
  };

  const closeRing = () => setRing(null);

  const applyStatus = (statusKey) => {
    if (!ring) return;
    const upd = (list, setter) => {
      const next = [...list];
      next[ring.index] = { ...next[ring.index], status: statusKey };
      setter(next);
    };
    if (ring.group === "teilnehmer") upd(teilnehmer, setTeilnehmer);
    else if (ring.group === "azubis") upd(azubis, setAzubis);
    else if (ring.group === "fachbereichsleiter")
      upd(fachbereichsleiter, setFachbereichsleiter);

    closeRing();
  };
  // Zusätzlich: an den Server senden, damit andere Dashboards sofort updaten
  try {
    const person =
      ring.group === "teilnehmer" ? teilnehmer[ring.index] :
      ring.group === "azubis" ? azubis[ring.index] :
      ring.group === "fachbereichsleiter" ? fachbereichsleiter[ring.index] :
      null;
    if (person?.id) {
      fetch(`${API_BASE}/status.php`, {
        method: "POST",
        headers: { "Content-Type": "application/json", Accept: "application/json" },
        body: JSON.stringify({ teilnehmer_id: person.id, status: statusKey }),
      }).catch(() => {});
    }
  } catch (e) { /* fire & forget */ }

  const Tile = ({ person, onClick }) => {
    const s = getStatus(person.status);
    return (
      <button className={`ifa-tile ${s.cls}`} onClick={onClick} aria-label={`${person.name}: ${s.label}`}>
        <span className="ifa-tile__label">{person.name}</span>
        <span className="ifa-tile__icon" style={{ color: s.color, background: "transparent", border: 0, boxShadow: "none", filter: "drop-shadow(0 0 4px currentColor) drop-shadow(0 0 10px currentColor)" }}><StatusIcon s={s} /></span>
      </button>
    );
  };

  return (
    <div className="ifa-board ifa-board--fullscreen">
      <div className="ifa-section">
        <div className="ifa-section__title">Fachbereichsleiter</div>
        <div className="ifa-grid ifa-grid--x4">
          {fachbereichsleiter.map((p, i) => (
            <Tile key={p.id} person={p} onClick={(e) => openRing("fachbereichsleiter", i, e)} />
          ))}
        </div>
      </div>

      <div className="ifa-section">
        <div className="ifa-section__title">Teilnehmer</div>
        <div className="ifa-grid ifa-grid--x4">
          {teilnehmer.map((p, i) => (
            <Tile
              key={p.id}
              person={p}
              onClick={(e) => openRing("teilnehmer", i, e)}
            />
          ))}
        </div>
      </div>


      <div className="ifa-section">
        <div className="ifa-section__title">Auszubildende</div>
        <div className="ifa-grid ifa-grid--x4">
          {azubis.map((p, i) => (
            <Tile key={p.id} person={p} onClick={(e) => openRing("azubis", i, e)} />
          ))}
        </div>
      </div>

      {/* Status-Ring (Overlay) */}
      {ring && (
        <StatusRing
          center={ring.center}
          options={STATUSES}
          onSelect={applyStatus}
          onClose={closeRing}
        />
      )}

      <Clock onTermineClick={() => (user ? setShowEntries(true) : setShowAuth(true))} />
      <LoginGear />
      <AuthModal
        open={showAuth}
        onClose={() => setShowAuth(false)}
        onLoggedIn={(u) => { setShowEntries(true); setUser(u); }}
      />
      <EntriesModal
        open={showEntries}
        onClose={() => setShowEntries(false)}
        user={user}
      />
      </div>
  );
}

/** Kreist Menü um den Klickpunkt */
function StatusRing({ center, options, onSelect, onClose, radius = 120 }) {
  useEffect(() => {
    const onKey = (e) => e.key === "Escape" && onClose();
    window.addEventListener("keydown", onKey);
    return () => window.removeEventListener("keydown", onKey);
  }, [onClose]);

  const count = options.length;
  // Dynamische Skalierung, damit der Ring im Viewport bleibt
  const [ringScale, setRingScale] = useState(1);
  useEffect(() => {
    function computeScale() {
      const W = window.innerWidth;
      const H = window.innerHeight;
      const r = radius;
      const btnHalf = 32;   // Buttons sind 64x64px
      const margin = 8;     // kleiner Sicherheitsabstand zum Rand

      // verfügbare Skalierung in jede Richtung berechnen
      const right  = (W - btnHalf - margin - center.x) / r;
      const left   = (center.x - btnHalf - margin) / r;
      const bottom = (H - btnHalf - margin - center.y) / r;
      const top    = (center.y - btnHalf - margin) / r;

      // minimalen Faktor wählen und sauber clampen
      let s = Math.min(1, right, left, bottom, top);
      if (!Number.isFinite(s)) s = 1;
      s = Math.max(0, Math.min(1, s)); // clamp in [0,1] – garantiert im Viewport, wenn möglich
      setRingScale(s);
    }
    computeScale();
    window.addEventListener('resize', computeScale);
    return () => window.removeEventListener('resize', computeScale);
  }, [center.x, center.y, radius]);

  const angle0 = -90; // Start oben

  return (
    <div className="ifa-ring-overlay" onClick={onClose}>
      <div className="ifa-ring" role="menu" aria-label="Status auswählen">
        {options.map((opt, i) => {
          const angle = angle0 + (360 / count) * i;
          const rad = (angle * Math.PI) / 180;
          const effR = radius * (ringScale || 1);
          const x = center.x + effR * Math.cos(rad);
          const y = center.y + effR * Math.sin(rad);
          return (
            <button
              key={opt.key}
              role="menuitem"
              className={`ifa-ring__btn ${opt.cls}`}
              style={{ left: x, top: y }}
              onClick={(e) => { e.stopPropagation(); onSelect(opt.key); }}
              aria-label={opt.label}
              title={opt.label}
            >
              <span className="ifa-ring__icon" style={{ color: opt.color, background: "transparent", border: 0, boxShadow: "none", filter: "drop-shadow(0 0 4px currentColor) drop-shadow(0 0 10px currentColor)" }}><StatusIcon s={opt} /></span>
            </button>
          );
        })}
        <div
          className="ifa-ring__center"
          style={{ left: center.x, top: center.y }}
          aria-hidden
        />
      </div></div>
  );
}

function Clock({ timeZone = "Europe/Berlin", onTermineClick }) {
  const [now, setNow] = useState(new Date());
  useEffect(() => { const id = setInterval(() => setNow(new Date()), 1000); return () => clearInterval(id); }, []);
  const locale = "de-DE";
  const time = new Intl.DateTimeFormat(locale, { hour: "2-digit", minute: "2-digit", hour12: false, timeZone }).format(now);
  const date = new Intl.DateTimeFormat(locale, { day: "2-digit", month: "2-digit", year: "2-digit", timeZone }).format(now);
  return (
    <div className="ifa-clock-dock">
      <button className="ds-btn ds-btn--primary ifa-termin-btn" onClick={onTermineClick}>
        Termine/Urlaub
      </button>
      <div className="ifa-clock">
        <div className="ifa-clock__time">{time}</div>
        <div className="ifa-clock__date">{date}</div>
      </div></div>
  );
}

export default function App() {
  return (
    <BrowserRouter>
      <div className="ds-app ds-app--bare">
        <main className="ds-main ds-main--flush">
          <Routes>
            <Route path="/" element={<Navigate to="/board" replace />} />
            <Route path="/board" element={<InfoBoard />} />
          </Routes>
        </main>
      </div>
    </BrowserRouter>
  );
}